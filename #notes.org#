* learnings and documentation
** Web dev using emacs
*** Packages I installed
*Packages I installed* 
1. web-mode
2. company-web
3. yasnippet
4. emmet-mode
5. added hooks and set indentations and other settings in .emacs file
6. added this to .emacs file for live server functionality: 
(require 'simple-httpd)
(setq httpd-root "/Users/zintan/magali-project")
But this setq did not work so I did "M-x httpd-serve-directory" and chose the directory "/Users/zintan/magali-project"
*** How to run the website from emacs
*How to run the website from emacs*
1. Make changes to your file
2. Run M-x httpd-start
3. Open the file you want to checkout by going to http://localhost:8080/NAMEOFFILE.html
** Making python-js web app
*** working with python and js using flask
*Setting up Flask* 
Working with python and js files using flask (at this point, I am no longer using httpd)
link to video: https://www.youtube.com/watch?v=HYO6GNOJMmQ
*** communicating between python file and js file
*Communicating between python file and js file*
link to blog: https://healeycodes.com/javascript/python/beginners/webdev/2019/04/11/talking-between-languages.html
*** Documentation V0
*Docs for other people to follow* 
1. Create file system with the following structure
   - project (any name - cs-resources )
       - app.py (app.py preferable)
       - templates 
           - index.html (any name)
       - static
           - script.js
2. Set up Flask in app.py (watch youtube video. link: https://www.youtube.com/watch?v=HYO6GNOJMmQ ). Be comfortable with running app on local host through flask.
   - pip install flask
3. Link app.py to script.js (Intro to JS Promises. Use the link to the blog as a resource: https://healeycodes.com/javascript/python/beginners/webdev/2019/04/11/talking-between-languages.html)
4. Import ezsheets to app.py and use it to access Google sheet. (link: https://automatetheboringstuff.com/2e/chapter14/) [DEPRECATED STEP]
5. Be able to display fetched information onto homepage using script.js. [DEPRECATED STEP]

6. Figure out how to deploy this app (For me) [DEPLOYED onto heroku]
*** Documentation V1
*Updated Docs*
1. Steps 1-3 from  Documentation V0 are still valid
2. Create service account and go through authentication logistical steps (link:https://medium.com/@denisluiz/python-with-google-sheets-service-account-step-by-step-8f74c26ed28e)
3. Take steps to ensure client_secret is secured (commit at first, deploy to heroku master, remove from commit and then you can add it to .gigignore and push to github) 
3. Follow steps to deploying on heroku [Flesh out more]  (links:
 https://devcenter.heroku.com/articles/getting-started-with-python#deploy-the-app
https://github.com/heroku/python-getting-started
https://www.youtube.com/watch?v=JBGC9Dp9cXI

rough steps: create heroku account, ensure your project is a git repo,  download Heroku CLI, create heroku project, setup Procfile, setup requirements.txt
)
4. Figure out any bugs ( Remember our Procfile for heroku uses gunicorn)

NOTE: to secure creds file: download the file into your repository, add the name of the file to your .gitignore, set the creds file as a heroku config variable by typing *heroku config:set GOOGLE_CREDS='CONTENTS OF YOUR CREDS FILE'* The quotes are important. The name GOOGLE_CREDS is not important, you can use whatever name you want.

* Extensions to web app
#+begin_src extensions
V0 - basic
V1 - use react 
V2 - automate web app  database
V3 - change datastore (to something more secure / personal datastore)
V4 - host on personal server
V5 - translate to other languages
v6 -  automate tags (using ML)
#+end_src
* <2020-08-11>
** DONE Set up web server and web files on emacs
** DONE Run a function from script.js 
** DONE Set up flask on the python file in emacs
** DONE Work through other examples presented in tutorial for python-to-js communication.
** DONE Start working through tutorial for using ezsheets.
* <2020-08-12>
** DONE finish proof of concept for using sheets as a database for web app
** DONE Make module for Magali to follow.
** DONE Look for resources on how to deploy the web application.
* <2020-08-18>
** DONE deploy test site
#+begin_src
upgraded google auth using pip
Deployed website 
useful video: https://www.youtube.com/watch?v=JBGC9Dp9cXI
ran app locally using 'gunicorn app:app'
#+end_src
** TODO Work on data cleaning of the Spreadsheet while Magali goes through the module.
** TODO Think about ways to write documentation for the site.
* <2020-08-22>
** DONE Attempt deploying with Google oath using example in the docs
** DONE fetch links according to sheet name
*** DONE find sheet name
*** DONE get sheet values
*** DONE return these values as json
** DONE deploy heroku app and ensure that API calls are working
* <2020-08-23>
** DONE secure creds file
** TODO delete exposed creds file from Github
